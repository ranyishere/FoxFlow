
void create_with_mt_growing_rule(DGGML::Grammar<Plant::graph_type> &gamma, Plant::graph_type &system_graph,
                              Parameters &settings) {

        //stochastic growing rule
        GT mt_growth_lhs;
        mt_growth_lhs.addNode({1, {Plant::Intermediate{}}});
        mt_growth_lhs.addNode({2, {Plant::Positive{}}});
        mt_growth_lhs.addEdge(1, 2);

        GT mt_growth_rhs;
        mt_growth_rhs.addNode({1, {Plant::Intermediate{}}});
        mt_growth_rhs.addNode({3, {Plant::Intermediate{}}});
        mt_growth_rhs.addNode({2, {Plant::Positive{}}});
        mt_growth_rhs.addEdge(1, 3);
        mt_growth_rhs.addEdge(3, 2);

        //TODO: I should make it so that any solving/propensity functions that need access to parameters
        // are actually passed as functors with states!
        DGGML::WithRule<GT> stochastic_mt_growth("stochastic_mt_growth", mt_growth_lhs, mt_growth_rhs,
                                                 [&](auto &lhs, auto &m) {
                                                     // return 0.0*2.0;
                                                     auto &node_i_data = lhs.findNode(m[1])->second.getData();
                                                     auto &node_j_data = lhs.findNode(m[2])->second.getData();
                                                     auto len = DGGML::calculate_distance(node_i_data.position,
                                                                                          node_j_data.position);
                                                     double propensity =
                                                             settings.WITH_GROWTH_RATE_FACTOR * DGGML::heaviside(len, settings.DIV_LENGTH);
                                                     //double propensity = DGGML::sigmoid((len/settings.DIV_LENGTH) - 1.0, settings.SIGMOID_K);
                                                     return propensity;
                                                 }, [&](auto &lhs, auto &rhs, auto &m1, auto &m2) {
                    rhs[m2[3]].position[0] =
                            lhs[m1[2]].position[0] - (lhs[m1[2]].position[0] - lhs[m1[1]].position[0]) / 100.0;
                    rhs[m2[3]].position[1] =
                            lhs[m1[2]].position[1] - (lhs[m1[2]].position[1] - lhs[m1[1]].position[1]) / 100.0;
                    rhs[m2[3]].position[2] =
                            lhs[m1[2]].position[2] - (lhs[m1[2]].position[2] - lhs[m1[1]].position[2]) / 100.0;
                    //next set the unit vector
                    auto& rhs_node3 = rhs[m2[3]];
                    auto& rhs_node3_data = std::get<Plant::Intermediate>(rhs_node3.data);
                    auto& u3 = rhs_node3_data.unit_vec;
                    u3[0] = std::get<Plant::Intermediate>(lhs[m1[1]].data).unit_vec[0];
                    u3[1] = std::get<Plant::Intermediate>(lhs[m1[1]].data).unit_vec[1];
                    u3[2] = std::get<Plant::Intermediate>(lhs[m1[1]].data).unit_vec[2];

                    //randomly wobble the growth direction of u2 on update
                    auto wobble_angle = settings.WOBBLE_ANGLE;
                    if(settings.ENABLE_WOBBLE) {
                        auto &rhs_node2 = rhs[m2[2]];
                        auto &rhs_node2_data = std::get<Plant::Positive>(rhs_node2.data);
                        auto &u2 = rhs_node2_data.unit_vec;
                        //rotate
                        std::random_device random_device;
                        std::mt19937 random_engine(random_device());
                        std::uniform_real_distribution<double> distribution_angle(-wobble_angle * (3.14 / 180.0),
                                                                                  wobble_angle * (3.14 / 180.0));
                        double angle = distribution_angle(random_engine);
                        double x = u2[0];
                        double y = u2[1];
                        u2[0] = x * cos(angle) - y * sin(angle);
                        u2[1] = x * sin(angle) + y * cos(angle);
            }
    });

    gamma.addRule(stochastic_mt_growth);
}
